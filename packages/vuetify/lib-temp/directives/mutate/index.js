function inserted(el, binding) {
    const modifiers = binding.modifiers || {};
    const value = binding.value;
    const callback = typeof value === 'object' ? value.handler : value;
    const { once, ...modifierKeys } = modifiers;
    const hasModifiers = Object.keys(modifierKeys).length > 0;
    // Options take top priority
    const options = typeof value === 'object' && value.options
        ? value.options
        : hasModifiers
            // If we have modifiers, use only those provided
            ? {
                attributes: modifierKeys.attr,
                childList: modifierKeys.child,
                subtree: modifierKeys.sub,
                characterData: modifierKeys.char,
            }
            // Defaults to everything on
            : {
                attributes: true,
                childList: true,
                subtree: true,
                characterData: true,
            };
    const observer = new MutationObserver((mutationsList, observer) => {
        /* istanbul ignore if */
        if (!el._mutate)
            return; // Just in case, should never fire
        callback(mutationsList, observer);
        // If has the once modifier, unbind
        once && unbind(el);
    });
    observer.observe(el, options);
    el._mutate = { observer };
}
function unbind(el) {
    /* istanbul ignore if */
    if (!el._mutate)
        return;
    el._mutate.observer.disconnect();
    delete el._mutate;
}
export const Mutate = {
    inserted,
    unbind,
};
export default Mutate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9tdXRhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBLFNBQVMsUUFBUSxDQUFFLEVBQWUsRUFBRSxPQUE2QjtJQUMvRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQTtJQUN6QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBO0lBQzNCLE1BQU0sUUFBUSxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFBO0lBQ25FLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxTQUFTLENBQUE7SUFDM0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0lBRXpELDRCQUE0QjtJQUM1QixNQUFNLE9BQU8sR0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU87UUFDeEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPO1FBQ2YsQ0FBQyxDQUFDLFlBQVk7WUFDWixnREFBZ0Q7WUFDaEQsQ0FBQyxDQUFDO2dCQUNBLFVBQVUsRUFBRSxZQUFZLENBQUMsSUFBSTtnQkFDN0IsU0FBUyxFQUFFLFlBQVksQ0FBQyxLQUFLO2dCQUM3QixPQUFPLEVBQUUsWUFBWSxDQUFDLEdBQUc7Z0JBQ3pCLGFBQWEsRUFBRSxZQUFZLENBQUMsSUFBSTthQUNqQztZQUNELDRCQUE0QjtZQUM1QixDQUFDLENBQUM7Z0JBQ0EsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFNBQVMsRUFBRSxJQUFJO2dCQUNmLE9BQU8sRUFBRSxJQUFJO2dCQUNiLGFBQWEsRUFBRSxJQUFJO2FBQ3BCLENBQUE7SUFFTCxNQUFNLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLENBQ3BDLGFBQStCLEVBQy9CLFFBQTBCLEVBQzFCLEVBQUU7UUFDRix3QkFBd0I7UUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPO1lBQUUsT0FBTSxDQUFDLGtDQUFrQztRQUUxRCxRQUFRLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBRWpDLG1DQUFtQztRQUNuQyxJQUFJLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ3BCLENBQUMsQ0FBQyxDQUFBO0lBRUYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDN0IsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFBO0FBQzNCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBRSxFQUFlO0lBQzlCLHdCQUF3QjtJQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU87UUFBRSxPQUFNO0lBRXZCLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ2hDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQTtBQUNuQixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHO0lBQ3BCLFFBQVE7SUFDUixNQUFNO0NBQ1AsQ0FBQTtBQUVELGVBQWUsTUFBTSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVk5vZGVEaXJlY3RpdmUgfSBmcm9tICd2dWUnXG5cbnR5cGUgTXV0YXRlSGFuZGxlciA9IChcbiAgbXV0YXRpb25zTGlzdDogTXV0YXRpb25SZWNvcmRbXSxcbiAgb2JzZXJ2ZXI6IE11dGF0aW9uT2JzZXJ2ZXIsXG4pID0+IHZvaWRcblxuaW50ZXJmYWNlIE11dGF0ZVZOb2RlRGlyZWN0aXZlIGV4dGVuZHMgT21pdDxWTm9kZURpcmVjdGl2ZSwgJ21vZGlmaWVycyc+IHtcbiAgdmFsdWU/OiBNdXRhdGVIYW5kbGVyIHwgeyBoYW5kbGVyOiBNdXRhdGVIYW5kbGVyLCBvcHRpb25zPzogTXV0YXRpb25PYnNlcnZlckluaXQgfVxuICBtb2RpZmllcnM/OiB7XG4gICAgb25jZT86IGJvb2xlYW5cbiAgICBhdHRyPzogYm9vbGVhblxuICAgIGNoaWxkPzogYm9vbGVhblxuICAgIHN1Yj86IGJvb2xlYW5cbiAgICBjaGFyPzogYm9vbGVhblxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydGVkIChlbDogSFRNTEVsZW1lbnQsIGJpbmRpbmc6IE11dGF0ZVZOb2RlRGlyZWN0aXZlKSB7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzIHx8IHt9XG4gIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZVxuICBjb25zdCBjYWxsYmFjayA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB2YWx1ZS5oYW5kbGVyIDogdmFsdWUhXG4gIGNvbnN0IHsgb25jZSwgLi4ubW9kaWZpZXJLZXlzIH0gPSBtb2RpZmllcnNcbiAgY29uc3QgaGFzTW9kaWZpZXJzID0gT2JqZWN0LmtleXMobW9kaWZpZXJLZXlzKS5sZW5ndGggPiAwXG5cbiAgLy8gT3B0aW9ucyB0YWtlIHRvcCBwcmlvcml0eVxuICBjb25zdCBvcHRpb25zID0gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5vcHRpb25zXG4gICAgPyB2YWx1ZS5vcHRpb25zXG4gICAgOiBoYXNNb2RpZmllcnNcbiAgICAgIC8vIElmIHdlIGhhdmUgbW9kaWZpZXJzLCB1c2Ugb25seSB0aG9zZSBwcm92aWRlZFxuICAgICAgPyB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IG1vZGlmaWVyS2V5cy5hdHRyLFxuICAgICAgICBjaGlsZExpc3Q6IG1vZGlmaWVyS2V5cy5jaGlsZCxcbiAgICAgICAgc3VidHJlZTogbW9kaWZpZXJLZXlzLnN1YixcbiAgICAgICAgY2hhcmFjdGVyRGF0YTogbW9kaWZpZXJLZXlzLmNoYXIsXG4gICAgICB9XG4gICAgICAvLyBEZWZhdWx0cyB0byBldmVyeXRoaW5nIG9uXG4gICAgICA6IHtcbiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgfVxuXG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKFxuICAgIG11dGF0aW9uc0xpc3Q6IE11dGF0aW9uUmVjb3JkW10sXG4gICAgb2JzZXJ2ZXI6IE11dGF0aW9uT2JzZXJ2ZXJcbiAgKSA9PiB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFlbC5fbXV0YXRlKSByZXR1cm4gLy8gSnVzdCBpbiBjYXNlLCBzaG91bGQgbmV2ZXIgZmlyZVxuXG4gICAgY2FsbGJhY2sobXV0YXRpb25zTGlzdCwgb2JzZXJ2ZXIpXG5cbiAgICAvLyBJZiBoYXMgdGhlIG9uY2UgbW9kaWZpZXIsIHVuYmluZFxuICAgIG9uY2UgJiYgdW5iaW5kKGVsKVxuICB9KVxuXG4gIG9ic2VydmVyLm9ic2VydmUoZWwsIG9wdGlvbnMpXG4gIGVsLl9tdXRhdGUgPSB7IG9ic2VydmVyIH1cbn1cblxuZnVuY3Rpb24gdW5iaW5kIChlbDogSFRNTEVsZW1lbnQpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghZWwuX211dGF0ZSkgcmV0dXJuXG5cbiAgZWwuX211dGF0ZS5vYnNlcnZlci5kaXNjb25uZWN0KClcbiAgZGVsZXRlIGVsLl9tdXRhdGVcbn1cblxuZXhwb3J0IGNvbnN0IE11dGF0ZSA9IHtcbiAgaW5zZXJ0ZWQsXG4gIHVuYmluZCxcbn1cblxuZXhwb3J0IGRlZmF1bHQgTXV0YXRlXG4iXX0=