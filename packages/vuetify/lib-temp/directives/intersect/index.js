function inserted(el, binding) {
    const modifiers = binding.modifiers || {};
    const value = binding.value;
    const { handler, options } = typeof value === 'object'
        ? value
        : { handler: value, options: {} };
    const observer = new IntersectionObserver((entries = [], observer) => {
        /* istanbul ignore if */
        if (!el._observe)
            return; // Just in case, should never fire
        // If is not quiet or has already been
        // initted, invoke the user callback
        if (handler && (!modifiers.quiet ||
            el._observe.init)) {
            const isIntersecting = Boolean(entries.find(entry => entry.isIntersecting));
            handler(entries, observer, isIntersecting);
        }
        // If has already been initted and
        // has the once modifier, unbind
        if (el._observe.init && modifiers.once)
            unbind(el);
        // Otherwise, mark the observer as initted
        else
            (el._observe.init = true);
    }, options);
    el._observe = { init: false, observer };
    observer.observe(el);
}
function unbind(el) {
    /* istanbul ignore if */
    if (!el._observe)
        return;
    el._observe.observer.unobserve(el);
    delete el._observe;
}
export const Intersect = {
    inserted,
    unbind,
};
export default Intersect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGlyZWN0aXZlcy9pbnRlcnNlY3QvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JBLFNBQVMsUUFBUSxDQUFFLEVBQWUsRUFBRSxPQUE4QjtJQUNoRSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQTtJQUN6QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBO0lBQzNCLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUTtRQUNwRCxDQUFDLENBQUMsS0FBSztRQUNQLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQW9CLENBQUMsQ0FDeEMsVUFBdUMsRUFBRSxFQUN6QyxRQUE4QixFQUM5QixFQUFFO1FBQ0Ysd0JBQXdCO1FBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUTtZQUFFLE9BQU0sQ0FBQyxrQ0FBa0M7UUFFM0Qsc0NBQXNDO1FBQ3RDLG9DQUFvQztRQUNwQyxJQUNFLE9BQU8sSUFBSSxDQUNULENBQUMsU0FBUyxDQUFDLEtBQUs7WUFDaEIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2pCLEVBQ0Q7WUFDQSxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFBO1lBRTNFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFBO1NBQzNDO1FBRUQsa0NBQWtDO1FBQ2xDLGdDQUFnQztRQUNoQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxJQUFJO1lBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2xELDBDQUEwQzs7WUFDckMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUNoQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFWCxFQUFFLENBQUMsUUFBUSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQTtJQUV2QyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3RCLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBRSxFQUFlO0lBQzlCLHdCQUF3QjtJQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVE7UUFBRSxPQUFNO0lBRXhCLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNsQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUE7QUFDcEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixRQUFRO0lBQ1IsTUFBTTtDQUNQLENBQUE7QUFFRCxlQUFlLFNBQVMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZOb2RlRGlyZWN0aXZlIH0gZnJvbSAndnVlL3R5cGVzL3Zub2RlJ1xuXG50eXBlIE9ic2VydmVIYW5kbGVyID0gKFxuICBlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10sXG4gIG9ic2VydmVyOiBJbnRlcnNlY3Rpb25PYnNlcnZlcixcbiAgaXNJbnRlcnNlY3Rpbmc6IGJvb2xlYW4sXG4pID0+IHZvaWRcblxuaW50ZXJmYWNlIE9ic2VydmVWTm9kZURpcmVjdGl2ZSBleHRlbmRzIE9taXQ8Vk5vZGVEaXJlY3RpdmUsICdtb2RpZmllcnMnPiB7XG4gIHZhbHVlPzogT2JzZXJ2ZUhhbmRsZXIgfCB7IGhhbmRsZXI6IE9ic2VydmVIYW5kbGVyLCBvcHRpb25zPzogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJJbml0IH1cbiAgbW9kaWZpZXJzPzoge1xuICAgIG9uY2U/OiBib29sZWFuXG4gICAgcXVpZXQ/OiBib29sZWFuXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0ZWQgKGVsOiBIVE1MRWxlbWVudCwgYmluZGluZzogT2JzZXJ2ZVZOb2RlRGlyZWN0aXZlKSB7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzIHx8IHt9XG4gIGNvbnN0IHZhbHVlID0gYmluZGluZy52YWx1ZVxuICBjb25zdCB7IGhhbmRsZXIsIG9wdGlvbnMgfSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbiAgICA/IHZhbHVlXG4gICAgOiB7IGhhbmRsZXI6IHZhbHVlLCBvcHRpb25zOiB7fSB9XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChcbiAgICBlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10gPSBbXSxcbiAgICBvYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJcbiAgKSA9PiB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFlbC5fb2JzZXJ2ZSkgcmV0dXJuIC8vIEp1c3QgaW4gY2FzZSwgc2hvdWxkIG5ldmVyIGZpcmVcblxuICAgIC8vIElmIGlzIG5vdCBxdWlldCBvciBoYXMgYWxyZWFkeSBiZWVuXG4gICAgLy8gaW5pdHRlZCwgaW52b2tlIHRoZSB1c2VyIGNhbGxiYWNrXG4gICAgaWYgKFxuICAgICAgaGFuZGxlciAmJiAoXG4gICAgICAgICFtb2RpZmllcnMucXVpZXQgfHxcbiAgICAgICAgZWwuX29ic2VydmUuaW5pdFxuICAgICAgKVxuICAgICkge1xuICAgICAgY29uc3QgaXNJbnRlcnNlY3RpbmcgPSBCb29sZWFuKGVudHJpZXMuZmluZChlbnRyeSA9PiBlbnRyeS5pc0ludGVyc2VjdGluZykpXG5cbiAgICAgIGhhbmRsZXIoZW50cmllcywgb2JzZXJ2ZXIsIGlzSW50ZXJzZWN0aW5nKVxuICAgIH1cblxuICAgIC8vIElmIGhhcyBhbHJlYWR5IGJlZW4gaW5pdHRlZCBhbmRcbiAgICAvLyBoYXMgdGhlIG9uY2UgbW9kaWZpZXIsIHVuYmluZFxuICAgIGlmIChlbC5fb2JzZXJ2ZS5pbml0ICYmIG1vZGlmaWVycy5vbmNlKSB1bmJpbmQoZWwpXG4gICAgLy8gT3RoZXJ3aXNlLCBtYXJrIHRoZSBvYnNlcnZlciBhcyBpbml0dGVkXG4gICAgZWxzZSAoZWwuX29ic2VydmUuaW5pdCA9IHRydWUpXG4gIH0sIG9wdGlvbnMpXG5cbiAgZWwuX29ic2VydmUgPSB7IGluaXQ6IGZhbHNlLCBvYnNlcnZlciB9XG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShlbClcbn1cblxuZnVuY3Rpb24gdW5iaW5kIChlbDogSFRNTEVsZW1lbnQpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghZWwuX29ic2VydmUpIHJldHVyblxuXG4gIGVsLl9vYnNlcnZlLm9ic2VydmVyLnVub2JzZXJ2ZShlbClcbiAgZGVsZXRlIGVsLl9vYnNlcnZlXG59XG5cbmV4cG9ydCBjb25zdCBJbnRlcnNlY3QgPSB7XG4gIGluc2VydGVkLFxuICB1bmJpbmQsXG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyc2VjdFxuIl19