// Types
import Vue from 'vue';
// Utils
import { getObjectValueByPath } from '../../util/helpers';
export default Vue.extend({
    name: 'row',
    functional: true,
    props: {
        headers: Array,
        item: Object,
        rtl: Boolean,
    },
    render(h, { props, slots, data }) {
        const computedSlots = slots();
        const columns = props.headers.map((header) => {
            const children = [];
            const value = getObjectValueByPath(props.item, header.value);
            const slotName = header.value;
            const scopedSlot = data.scopedSlots && data.scopedSlots[slotName];
            const regularSlot = computedSlots[slotName];
            if (scopedSlot) {
                children.push(scopedSlot({ item: props.item, header, value }));
            }
            else if (regularSlot) {
                children.push(regularSlot);
            }
            else {
                children.push(value == null ? value : String(value));
            }
            const textAlign = `text-${header.align || 'start'}`;
            return h('td', {
                class: {
                    [textAlign]: true,
                    'v-data-table__divider': header.divider,
                },
            }, children);
        });
        return h('tr', data, columns);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9Sb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUTtBQUNSLE9BQU8sR0FBd0IsTUFBTSxLQUFLLENBQUE7QUFHMUMsUUFBUTtBQUNSLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRXpELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUN4QixJQUFJLEVBQUUsS0FBSztJQUVYLFVBQVUsRUFBRSxJQUFJO0lBRWhCLEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxLQUFvQztRQUM3QyxJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRSxPQUFPO0tBQ2I7SUFFRCxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDL0IsTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLENBQUE7UUFFN0IsTUFBTSxPQUFPLEdBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUF1QixFQUFFLEVBQUU7WUFDckUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO1lBQ25CLE1BQU0sS0FBSyxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBRTVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7WUFDN0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ2pFLE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUUzQyxJQUFJLFVBQVUsRUFBRTtnQkFDZCxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDL0Q7aUJBQU0sSUFBSSxXQUFXLEVBQUU7Z0JBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7YUFDM0I7aUJBQU07Z0JBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO2FBQ3JEO1lBRUQsTUFBTSxTQUFTLEdBQUcsUUFBUSxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sRUFBRSxDQUFBO1lBRW5ELE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDYixLQUFLLEVBQUU7b0JBQ0wsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJO29CQUNqQix1QkFBdUIsRUFBRSxNQUFNLENBQUMsT0FBTztpQkFDeEM7YUFDRixFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ2QsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlc1xuaW1wb3J0IFZ1ZSwgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRhVGFibGVIZWFkZXIgfSBmcm9tICd2dWV0aWZ5L3R5cGVzJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgZ2V0T2JqZWN0VmFsdWVCeVBhdGggfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZS5leHRlbmQoe1xuICBuYW1lOiAncm93JyxcblxuICBmdW5jdGlvbmFsOiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaGVhZGVyczogQXJyYXkgYXMgUHJvcFR5cGU8RGF0YVRhYmxlSGVhZGVyW10+LFxuICAgIGl0ZW06IE9iamVjdCxcbiAgICBydGw6IEJvb2xlYW4sXG4gIH0sXG5cbiAgcmVuZGVyIChoLCB7IHByb3BzLCBzbG90cywgZGF0YSB9KTogVk5vZGUge1xuICAgIGNvbnN0IGNvbXB1dGVkU2xvdHMgPSBzbG90cygpXG5cbiAgICBjb25zdCBjb2x1bW5zOiBWTm9kZVtdID0gcHJvcHMuaGVhZGVycy5tYXAoKGhlYWRlcjogRGF0YVRhYmxlSGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtdXG4gICAgICBjb25zdCB2YWx1ZSA9IGdldE9iamVjdFZhbHVlQnlQYXRoKHByb3BzLml0ZW0sIGhlYWRlci52YWx1ZSlcblxuICAgICAgY29uc3Qgc2xvdE5hbWUgPSBoZWFkZXIudmFsdWVcbiAgICAgIGNvbnN0IHNjb3BlZFNsb3QgPSBkYXRhLnNjb3BlZFNsb3RzICYmIGRhdGEuc2NvcGVkU2xvdHNbc2xvdE5hbWVdXG4gICAgICBjb25zdCByZWd1bGFyU2xvdCA9IGNvbXB1dGVkU2xvdHNbc2xvdE5hbWVdXG5cbiAgICAgIGlmIChzY29wZWRTbG90KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goc2NvcGVkU2xvdCh7IGl0ZW06IHByb3BzLml0ZW0sIGhlYWRlciwgdmFsdWUgfSkpXG4gICAgICB9IGVsc2UgaWYgKHJlZ3VsYXJTbG90KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2gocmVndWxhclNsb3QpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKHZhbHVlID09IG51bGwgPyB2YWx1ZSA6IFN0cmluZyh2YWx1ZSkpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRleHRBbGlnbiA9IGB0ZXh0LSR7aGVhZGVyLmFsaWduIHx8ICdzdGFydCd9YFxuXG4gICAgICByZXR1cm4gaCgndGQnLCB7XG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgW3RleHRBbGlnbl06IHRydWUsXG4gICAgICAgICAgJ3YtZGF0YS10YWJsZV9fZGl2aWRlcic6IGhlYWRlci5kaXZpZGVyLFxuICAgICAgICB9LFxuICAgICAgfSwgY2hpbGRyZW4pXG4gICAgfSlcblxuICAgIHJldHVybiBoKCd0cicsIGRhdGEsIGNvbHVtbnMpXG4gIH0sXG59KVxuIl19