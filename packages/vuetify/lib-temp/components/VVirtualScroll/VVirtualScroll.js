// Styles
import './VVirtualScroll.sass';
// Mixins
import Measurable from '../../mixins/measurable';
// Directives
import Scroll from '../../directives/scroll';
// Utilities
import { convertToUnit, getSlot, } from '../../util/helpers';
export default Measurable.extend({
    name: 'v-virtual-scroll',
    directives: { Scroll },
    props: {
        bench: {
            type: [Number, String],
            default: 0,
        },
        itemHeight: {
            type: [Number, String],
            required: true,
        },
        items: {
            type: Array,
            default: () => [],
        },
    },
    data: () => ({
        first: 0,
        last: 0,
        scrollTop: 0,
    }),
    computed: {
        __bench() {
            return parseInt(this.bench, 10);
        },
        __itemHeight() {
            return parseInt(this.itemHeight, 10);
        },
        firstToRender() {
            return Math.max(0, this.first - this.__bench);
        },
        lastToRender() {
            return Math.min(this.items.length, this.last + this.__bench);
        },
    },
    watch: {
        height: 'onScroll',
        itemHeight: 'onScroll',
    },
    mounted() {
        this.last = this.getLast(0);
    },
    methods: {
        getChildren() {
            return this.items.slice(this.firstToRender, this.lastToRender).map(this.genChild);
        },
        genChild(item, index) {
            index += this.firstToRender;
            const top = convertToUnit(index * this.__itemHeight);
            return this.$createElement('div', {
                staticClass: 'v-virtual-scroll__item',
                style: { top },
                key: index,
            }, getSlot(this, 'default', { index, item }));
        },
        getFirst() {
            return Math.floor(this.scrollTop / this.__itemHeight);
        },
        getLast(first) {
            const height = parseInt(this.height || 0, 10) || this.$el.clientHeight;
            return first + Math.ceil(height / this.__itemHeight);
        },
        onScroll() {
            this.scrollTop = this.$el.scrollTop;
            this.first = this.getFirst();
            this.last = this.getLast(this.first);
        },
    },
    render(h) {
        const content = h('div', {
            staticClass: 'v-virtual-scroll__container',
            style: {
                height: convertToUnit((this.items.length * this.__itemHeight)),
            },
        }, this.getChildren());
        return h('div', {
            staticClass: 'v-virtual-scroll',
            style: this.measurableStyles,
            directives: [{
                    name: 'scroll',
                    modifiers: { self: true },
                    value: this.onScroll,
                }],
        }, [content]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlZpcnR1YWxTY3JvbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WVmlydHVhbFNjcm9sbC9WVmlydHVhbFNjcm9sbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyx1QkFBdUIsQ0FBQTtBQUU5QixTQUFTO0FBQ1QsT0FBTyxVQUFVLE1BQU0seUJBQXlCLENBQUE7QUFFaEQsYUFBYTtBQUNiLE9BQU8sTUFBTSxNQUFNLHlCQUF5QixDQUFBO0FBRTVDLFlBQVk7QUFDWixPQUFPLEVBQ0wsYUFBYSxFQUNiLE9BQU8sR0FDUixNQUFNLG9CQUFvQixDQUFBO0FBSzNCLGVBQWUsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFJLEVBQUUsa0JBQWtCO0lBRXhCLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRTtJQUV0QixLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLFFBQVEsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsS0FBSztZQUNYLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1NBQ2xCO0tBQ0Y7SUFFRCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNYLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxFQUFFLENBQUM7UUFDUCxTQUFTLEVBQUUsQ0FBQztLQUNiLENBQUM7SUFFRixRQUFRLEVBQUU7UUFDUixPQUFPO1lBQ0wsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNqQyxDQUFDO1FBQ0QsWUFBWTtZQUNWLE9BQU8sUUFBUSxDQUFD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QUNkLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7b0JBQ3pCLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtpQkFDckIsQ0FBQztTQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQ2YsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFN0eWxlc1xuaW1wb3J0ICcuL1ZWaXJ0dWFsU2Nyb2xsLnNhc3MnXG5cbi8vIE1peGluc1xuaW1wb3J0IE1lYXN1cmFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL21lYXN1cmFibGUnXG5cbi8vIERpcmVjdGl2ZXNcbmltcG9ydCBTY3JvbGwgZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9zY3JvbGwnXG5cbi8vIFV0aWxpdGllc1xuaW1wb3J0IHtcbiAgY29udmVydFRvVW5pdCxcbiAgZ2V0U2xvdCxcbn0gZnJvbSAnLi4vLi4vdXRpbC9oZWxwZXJzJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5cbmV4cG9ydCBkZWZhdWx0IE1lYXN1cmFibGUuZXh0ZW5kKHtcbiAgbmFtZTogJ3YtdmlydHVhbC1zY3JvbGwnLFxuXG4gIGRpcmVjdGl2ZXM6IHsgU2Nyb2xsIH0sXG5cbiAgcHJvcHM6IHtcbiAgICBiZW5jaDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIGRlZmF1bHQ6IDAsXG4gICAgfSxcbiAgICBpdGVtSGVpZ2h0OiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfSxcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXSxcbiAgICB9LFxuICB9LFxuXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgZmlyc3Q6IDAsXG4gICAgbGFzdDogMCxcbiAgICBzY3JvbGxUb3A6IDAsXG4gIH0pLFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgX19iZW5jaCAoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmJlbmNoLCAxMClcbiAgICB9LFxuICAgIF9faXRlbUhlaWdodCAoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLml0ZW1IZWlnaHQsIDEwKVxuICAgIH0sXG4gICAgZmlyc3RUb1JlbmRlciAoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBNYXRoLm1heCgwLCB0aGlzLmZpcnN0IC0gdGhpcy5fX2JlbmNoKVxuICAgIH0sXG4gICAgbGFzdFRvUmVuZGVyICgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMuaXRlbXMubGVuZ3RoLCB0aGlzLmxhc3QgKyB0aGlzLl9fYmVuY2gpXG4gICAgfSxcbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGhlaWdodDogJ29uU2Nyb2xsJyxcbiAgICBpdGVtSGVpZ2h0OiAnb25TY3JvbGwnLFxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMubGFzdCA9IHRoaXMuZ2V0TGFzdCgwKVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRDaGlsZHJlbiAoKTogVk5vZGVbXSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVtcy5zbGljZShcbiAgICAgICAgdGhpcy5maXJzdFRvUmVuZGVyLFxuICAgICAgICB0aGlzLmxhc3RUb1JlbmRlcixcbiAgICAgICkubWFwKHRoaXMuZ2VuQ2hpbGQpXG4gICAgfSxcbiAgICBnZW5DaGlsZCAoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICBpbmRleCArPSB0aGlzLmZpcnN0VG9SZW5kZXJcblxuICAgICAgY29uc3QgdG9wID0gY29udmVydFRvVW5pdChpbmRleCAqIHRoaXMuX19pdGVtSGVpZ2h0KVxuXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBzdGF0aWNDbGFzczogJ3YtdmlydHVhbC1zY3JvbGxfX2l0ZW0nLFxuICAgICAgICBzdHlsZTogeyB0b3AgfSxcbiAgICAgICAga2V5OiBpbmRleCxcbiAgICAgIH0sIGdldFNsb3QodGhpcywgJ2RlZmF1bHQnLCB7IGluZGV4LCBpdGVtIH0pKVxuICAgIH0sXG4gICAgZ2V0Rmlyc3QgKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLnNjcm9sbFRvcCAvIHRoaXMuX19pdGVtSGVpZ2h0KVxuICAgIH0sXG4gICAgZ2V0TGFzdCAoZmlyc3Q6IG51bWJlcik6IG51bWJlciB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUludCh0aGlzLmhlaWdodCB8fCAwLCAxMCkgfHwgdGhpcy4kZWwuY2xpZW50SGVpZ2h0XG5cbiAgICAgIHJldHVybiBmaXJzdCArIE1hdGguY2VpbChoZWlnaHQgLyB0aGlzLl9faXRlbUhlaWdodClcbiAgICB9LFxuICAgIG9uU2Nyb2xsICgpIHtcbiAgICAgIHRoaXMuc2Nyb2xsVG9wID0gdGhpcy4kZWwuc2Nyb2xsVG9wXG4gICAgICB0aGlzLmZpcnN0ID0gdGhpcy5nZXRGaXJzdCgpXG4gICAgICB0aGlzLmxhc3QgPSB0aGlzLmdldExhc3QodGhpcy5maXJzdClcbiAgICB9LFxuICB9LFxuXG4gIHJlbmRlciAoaCk6IFZOb2RlIHtcbiAgICBjb25zdCBjb250ZW50ID0gaCgnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6ICd2LXZpcnR1YWwtc2Nyb2xsX19jb250YWluZXInLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgaGVpZ2h0OiBjb252ZXJ0VG9Vbml0KCh0aGlzLml0ZW1zLmxlbmd0aCAqIHRoaXMuX19pdGVtSGVpZ2h0KSksXG4gICAgICB9LFxuICAgIH0sIHRoaXMuZ2V0Q2hpbGRyZW4oKSlcblxuICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICBzdGF0aWNDbGFzczogJ3YtdmlydHVhbC1zY3JvbGwnLFxuICAgICAgc3R5bGU6IHRoaXMubWVhc3VyYWJsZVN0eWxlcyxcbiAgICAgIGRpcmVjdGl2ZXM6IFt7XG4gICAgICAgIG5hbWU6ICdzY3JvbGwnLFxuICAgICAgICBtb2RpZmllcnM6IHsgc2VsZjogdHJ1ZSB9LFxuICAgICAgICB2YWx1ZTogdGhpcy5vblNjcm9sbCxcbiAgICAgIH1dLFxuICAgIH0sIFtjb250ZW50XSlcbiAgfSxcbn0pXG4iXX0=