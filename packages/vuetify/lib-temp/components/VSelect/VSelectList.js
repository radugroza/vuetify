// Components
import VSimpleCheckbox from '../VCheckbox/VSimpleCheckbox';
import VDivider from '../VDivider';
import VSubheader from '../VSubheader';
import { VList, VListItem, VListItemAction, VListItemContent, VListItemTitle, } from '../VList';
// Directives
import ripple from '../../directives/ripple';
// Mixins
import Colorable from '../../mixins/colorable';
import Themeable from '../../mixins/themeable';
// Helpers
import { escapeHTML, getPropertyFromItem, } from '../../util/helpers';
// Types
import mixins from '../../util/mixins';
/* @vue/component */
export default mixins(Colorable, Themeable).extend({
    name: 'v-select-list',
    // https://github.com/vuejs/vue/issues/6872
    directives: {
        ripple,
    },
    props: {
        action: Boolean,
        dense: Boolean,
        hideSelected: Boolean,
        items: {
            type: Array,
            default: () => [],
        },
        itemDisabled: {
            type: [String, Array, Function],
            default: 'disabled',
        },
        itemText: {
            type: [String, Array, Function],
            default: 'text',
        },
        itemValue: {
            type: [String, Array, Function],
            default: 'value',
        },
        noDataText: String,
        noFilter: Boolean,
        searchInput: null,
        selectedItems: {
            type: Array,
            default: () => [],
        },
    },
    computed: {
        parsedItems() {
            return this.selectedItems.map(item => this.getValue(item));
        },
        tileActiveClass() {
            return Object.keys(this.setTextColor(this.color).class || {}).join(' ');
        },
        staticNoDataTile() {
            const tile = {
                attrs: {
                    role: undefined,
                },
                on: {
                    mousedown: (e) => e.preventDefault(),
                },
            };
            return this.$createElement(VListItem, tile, [
                this.genTileContent(this.noDataText),
            ]);
        },
    },
    methods: {
        genAction(item, inputValue) {
            return this.$createElement(VListItemAction, [
                this.$createElement(VSimpleCheckbox, {
                    props: {
                        color: this.color,
                        value: inputValue,
                    },
                    on: {
                        input: () => this.$emit('select', item),
                    },
                }),
            ]);
        },
        genDivider(props) {
            return this.$createElement(VDivider, { props });
        },
        genFilteredText(text) {
            text = text || '';
            if (!this.searchInput || this.noFilter)
                return escapeHTML(text);
            const { start, middle, end } = this.getMaskedCharacters(text);
            return `${escapeHTML(start)}${this.genHighlight(middle)}${escapeHTML(end)}`;
        },
        genHeader(props) {
            return this.$createElement(VSubheader, { props }, props.header);
        },
        genHighlight(text) {
            return `<span class="v-list-item__mask">${escapeHTML(text)}</span>`;
        },
        getMaskedCharacters(text) {
            const searchInput = (this.searchInput || '').toString().toLocaleLowerCase();
            const index = text.toLocaleLowerCase().indexOf(searchInput);
            if (index < 0)
                return { start: '', middle: text, end: '' };
            const start = text.slice(0, index);
            const middle = text.slice(index, index + searchInput.length);
            const end = text.slice(index + searchInput.length);
            return { start, middle, end };
        },
        genTile({ item, index, disabled = null, value = false, }) {
            if (!value)
                value = this.hasItem(item);
            if (item === Object(item)) {
                disabled = disabled !== null
                    ? disabled
                    : this.getDisabled(item);
            }
            const tile = {
                attrs: {
                    // Default behavior in list does not
                    // contain aria-selected by default
                    'aria-selected': String(value),
                    id: `list-item-${this._uid}-${index}`,
                    role: 'option',
                },
                on: {
                    mousedown: (e) => {
                        // Prevent onBlur from being called
                        e.preventDefault();
                    },
                    click: () => disabled || this.$emit('select', item),
                },
                props: {
                    activeClass: this.tileActiveClass,
                    disabled,
                    ripple: true,
                    inputValue: value,
                },
            };
            if (!this.$scopedSlots.item) {
                return this.$createElement(VListItem, tile, [
                    this.action && !this.hideSelected && this.items.length > 0
                        ? this.genAction(item, value)
                        : null,
                    this.genTileContent(item, index),
                ]);
            }
            const parent = this;
            const scopedSlot = this.$scopedSlots.item({
                parent,
                item,
                attrs: {
                    ...tile.attrs,
                    ...tile.props,
                },
                on: tile.on,
            });
            return this.needsTile(scopedSlot)
                ? this.$createElement(VListItem, tile, scopedSlot)
                : scopedSlot;
        },
        genTileContent(item, index = 0) {
            const innerHTML = this.genFilteredText(this.getText(item));
            return this.$createElement(VListItemContent, [this.$createElement(VListItemTitle, {
                    domProps: { innerHTML },
                })]);
        },
        hasItem(item) {
            return this.parsedItems.indexOf(this.getValue(item)) > -1;
        },
        needsTile(slot) {
            return slot.length !== 1 ||
                slot[0].componentOptions == null ||
                slot[0].componentOptions.Ctor.options.name !== 'v-list-item';
        },
        getDisabled(item) {
            return Boolean(getPropertyFromItem(item, this.itemDisabled, false));
        },
        getText(item) {
            return String(getPropertyFromItem(item, this.itemText, item));
        },
        getValue(item) {
            return getPropertyFromItem(item, this.itemValue, this.getText(item));
        },
    },
    render() {
        const children = [];
        const itemsLength = this.items.length;
        for (let index = 0; index < itemsLength; index++) {
            const item = this.items[index];
            if (this.hideSelected &&
                this.hasItem(item))
                continue;
            if (item == null)
                children.push(this.genTile({ item, index }));
            else if (item.header)
                children.push(this.genHeader(item));
            else if (item.divider)
                children.push(this.genDivider(item));
            else
                children.push(this.genTile({ item, index }));
        }
        children.length || children.push(this.$slots['no-data'] || this.staticNoDataTile);
        this.$slots['prepend-item'] && children.unshift(this.$slots['prepend-item']);
        this.$slots['append-item'] && children.push(this.$slots['append-item']);
        return this.$createElement(VList, {
            staticClass: 'v-select-list',
            class: this.themeClasses,
            attrs: {
                role: 'listbox',
                tabindex: -1,
            },
            props: { dense: this.dense },
        }, children);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlNlbGVjdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGFBQWE7QUFDYixPQUFPLGVBQWUsTUFBTSw4QkFBOEIsQ0FBQTtBQUMxRCxPQUFPLFFBQVEsTUFBTSxhQUFhLENBQUE7QUFDbEMsT0FBTyxVQUFVLE1BQU0sZUFBZSxDQUFBO0FBQ3RDLE9BQU8sRUFDTCxLQUFLLEVBQ0wsU0FBUyxFQUNULGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsY0FBYyxHQUNmLE1BQU0sVUFBVSxDQUFBO0FBRWpCLGFBQWE7QUFDYixPQUFPLE1BQU0sTUFBTSx5QkFBeUIsQ0FBQTtBQUU1QyxTQUFTO0FBQ1QsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDOUMsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFFOUMsVUFBVTtBQUNWLE9BQU8sRUFDTCxVQUFVLEVBQ1YsbUJBQW1CLEdBQ3BCLE1BQU0sb0JBQW9CLENBQUE7QUFFM0IsUUFBUTtBQUNSLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBTXRDLG9CQUFvQjtBQUNwQixlQUFlLE1BQU0sQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2pELElBQUksRUFBRSxlQUFlO0lBRXJCLDJDQUEyQztJQUMzQyxVQUFVLEVBQUU7UUFDVixNQUFNO0tBQ1A7SUFFRCxLQUFLLEVBQUU7UUFDTCxNQUFNLEVBQUUsT0FBTztRQUNmLEtBQUssRUFBRSxPQUFPO1FBQ2QsWUFBWSxFQUFFLE9BQU87UUFDckIsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQXdCO1lBQzlCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFO1NBQ2xCO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFR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LFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO2lCQUNwRCxJQUFJLElBQUksQ0FBQyxPQUFPO2dCQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBOztnQkFDdEQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUNsRDtRQUVELFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1FBRWpGLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUE7UUFFNUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQTtRQUV2RSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFO1lBQ2hDLFdBQVcsRUFBRSxlQUFlO1lBQzVCLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWTtZQUN4QixLQUFLLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsUUFBUSxFQUFFLENBQUMsQ0FBQzthQUNiO1lBQ0QsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUU7U0FDN0IsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNkLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb21wb25lbnRzXG5pbXBvcnQgVlNpbXBsZUNoZWNrYm94IGZyb20gJy4uL1ZDaGVja2JveC9WU2ltcGxlQ2hlY2tib3gnXG5pbXBvcnQgVkRpdmlkZXIgZnJvbSAnLi4vVkRpdmlkZXInXG5pbXBvcnQgVlN1YmhlYWRlciBmcm9tICcuLi9WU3ViaGVhZGVyJ1xuaW1wb3J0IHtcbiAgVkxpc3QsXG4gIFZMaXN0SXRlbSxcbiAgVkxpc3RJdGVtQWN0aW9uLFxuICBWTGlzdEl0ZW1Db250ZW50LFxuICBWTGlzdEl0ZW1UaXRsZSxcbn0gZnJvbSAnLi4vVkxpc3QnXG5cbi8vIERpcmVjdGl2ZXNcbmltcG9ydCByaXBwbGUgZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUnXG5cbi8vIE1peGluc1xuaW1wb3J0IENvbG9yYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvY29sb3JhYmxlJ1xuaW1wb3J0IFRoZW1lYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvdGhlbWVhYmxlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQge1xuICBlc2NhcGVIVE1MLFxuICBnZXRQcm9wZXJ0eUZyb21JdGVtLFxufSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5cbi8vIFR5cGVzXG5pbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uL3V0aWwvbWl4aW5zJ1xuaW1wb3J0IHsgVk5vZGUsIFByb3BUeXBlLCBWTm9kZUNoaWxkcmVuIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgU2VsZWN0SXRlbUtleSB9IGZyb20gJ3Z1ZXRpZnkvdHlwZXMnXG5cbnR5cGUgTGlzdFRpbGUgPSB7IGl0ZW06IGFueSwgZGlzYWJsZWQ/OiBudWxsIHwgYm9vbGVhbiwgdmFsdWU/OiBib29sZWFuLCBpbmRleDogbnVtYmVyIH07XG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCBtaXhpbnMoQ29sb3JhYmxlLCBUaGVtZWFibGUpLmV4dGVuZCh7XG4gIG5hbWU6ICd2LXNlbGVjdC1saXN0JyxcblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL2lzc3Vlcy82ODcyXG4gIGRpcmVjdGl2ZXM6IHtcbiAgICByaXBwbGUsXG4gIH0sXG5cbiAgcHJvcHM6IHtcbiAgICBhY3Rpb246IEJvb2xlYW4sXG4gICAgZGVuc2U6IEJvb2xlYW4sXG4gICAgaGlkZVNlbGVjdGVkOiBCb29sZWFuLFxuICAgIGl0ZW1zOiB7XG4gICAgICB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxhbnlbXT4sXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXSxcbiAgICB9LFxuICAgIGl0ZW1EaXNhYmxlZDoge1xuICAgICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSBhcyBQcm9wVHlwZTxTZWxlY3RJdGVtS2V5PixcbiAgICAgIGRlZmF1bHQ6ICdkaXNhYmxlZCcsXG4gICAgfSxcbiAgICBpdGVtVGV4dDoge1xuICAgICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSBhcyBQcm9wVHlwZTxTZWxlY3RJdGVtS2V5PixcbiAgICAgIGRlZmF1bHQ6ICd0ZXh0JyxcbiAgICB9LFxuICAgIGl0ZW1WYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSBhcyBQcm9wVHlwZTxTZWxlY3RJdGVtS2V5PixcbiAgICAgIGRlZmF1bHQ6ICd2YWx1ZScsXG4gICAgfSxcbiAgICBub0RhdGFUZXh0OiBTdHJpbmcsXG4gICAgbm9GaWx0ZXI6IEJvb2xlYW4sXG4gICAgc2VhcmNoSW5wdXQ6IG51bGwgYXMgdW5rbm93biBhcyBQcm9wVHlwZTxhbnk+LFxuICAgIHNlbGVjdGVkSXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPGFueVtdPixcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdLFxuICAgIH0sXG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBwYXJzZWRJdGVtcyAoKTogYW55W10ge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJdGVtcy5tYXAoaXRlbSA9PiB0aGlzLmdldFZhbHVlKGl0ZW0pKVxuICAgIH0sXG4gICAgdGlsZUFjdGl2ZUNsYXNzICgpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2V0VGV4dENvbG9yKHRoaXMuY29sb3IpLmNsYXNzIHx8IHt9KS5qb2luKCcgJylcbiAgICB9LFxuICAgIHN0YXRpY05vRGF0YVRpbGUgKCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IHRpbGUgPSB7XG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgcm9sZTogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIG1vdXNlZG93bjogKGU6IEV2ZW50KSA9PiBlLnByZXZlbnREZWZhdWx0KCksIC8vIFByZXZlbnQgb25CbHVyIGZyb20gYmVpbmcgY2FsbGVkXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0SXRlbSwgdGlsZSwgW1xuICAgICAgICB0aGlzLmdlblRpbGVDb250ZW50KHRoaXMubm9EYXRhVGV4dCksXG4gICAgICBdKVxuICAgIH0sXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGdlbkFjdGlvbiAoaXRlbTogb2JqZWN0LCBpbnB1dFZhbHVlOiBhbnkpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWTGlzdEl0ZW1BY3Rpb24sIFtcbiAgICAgICAgdGhpcy4kY3JlYXRlRWxlbWVudChWU2ltcGxlQ2hlY2tib3gsIHtcbiAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICAgICAgICB2YWx1ZTogaW5wdXRWYWx1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBpbnB1dDogKCkgPT4gdGhpcy4kZW1pdCgnc2VsZWN0JywgaXRlbSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICBdKVxuICAgIH0sXG4gICAgZ2VuRGl2aWRlciAocHJvcHM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZEaXZpZGVyLCB7IHByb3BzIH0pXG4gICAgfSxcbiAgICBnZW5GaWx0ZXJlZFRleHQgKHRleHQ6IHN0cmluZykge1xuICAgICAgdGV4dCA9IHRleHQgfHwgJydcblxuICAgICAgaWYgKCF0aGlzLnNlYXJjaElucHV0IHx8IHRoaXMubm9GaWx0ZXIpIHJldHVybiBlc2NhcGVIVE1MKHRleHQpXG5cbiAgICAgIGNvbnN0IHsgc3RhcnQsIG1pZGRsZSwgZW5kIH0gPSB0aGlzLmdldE1hc2tlZENoYXJhY3RlcnModGV4dClcblxuICAgICAgcmV0dXJuIGAke2VzY2FwZUhUTUwoc3RhcnQpfSR7dGhpcy5nZW5IaWdobGlnaHQobWlkZGxlKX0ke2VzY2FwZUhUTUwoZW5kKX1gXG4gICAgfSxcbiAgICBnZW5IZWFkZXIgKHByb3BzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogVk5vZGUge1xuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVlN1YmhlYWRlciwgeyBwcm9wcyB9LCBwcm9wcy5oZWFkZXIpXG4gICAgfSxcbiAgICBnZW5IaWdobGlnaHQgKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwidi1saXN0LWl0ZW1fX21hc2tcIj4ke2VzY2FwZUhUTUwodGV4dCl9PC9zcGFuPmBcbiAgICB9LFxuICAgIGdldE1hc2tlZENoYXJhY3RlcnMgKHRleHQ6IHN0cmluZyk6IHtcbiAgICAgIHN0YXJ0OiBzdHJpbmdcbiAgICAgIG1pZGRsZTogc3RyaW5nXG4gICAgICBlbmQ6IHN0cmluZ1xuICAgIH0ge1xuICAgICAgY29uc3Qgc2VhcmNoSW5wdXQgPSAodGhpcy5zZWFyY2hJbnB1dCB8fCAnJykudG9TdHJpbmcoKS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICBjb25zdCBpbmRleCA9IHRleHQudG9Mb2NhbGVMb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaElucHV0KVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4geyBzdGFydDogJycsIG1pZGRsZTogdGV4dCwgZW5kOiAnJyB9XG5cbiAgICAgIGNvbnN0IHN0YXJ0ID0gdGV4dC5zbGljZSgwLCBpbmRleClcbiAgICAgIGNvbnN0IG1pZGRsZSA9IHRleHQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoSW5wdXQubGVuZ3RoKVxuICAgICAgY29uc3QgZW5kID0gdGV4dC5zbGljZShpbmRleCArIHNlYXJjaElucHV0Lmxlbmd0aClcbiAgICAgIHJldHVybiB7IHN0YXJ0LCBtaWRkbGUsIGVuZCB9XG4gICAgfSxcbiAgICBnZW5UaWxlICh7XG4gICAgICBpdGVtLFxuICAgICAgaW5kZXgsXG4gICAgICBkaXNhYmxlZCA9IG51bGwsXG4gICAgICB2YWx1ZSA9IGZhbHNlLFxuICAgIH06IExpc3RUaWxlKTogVk5vZGUgfCBWTm9kZVtdIHwgdW5kZWZpbmVkIHtcbiAgICAgIGlmICghdmFsdWUpIHZhbHVlID0gdGhpcy5oYXNJdGVtKGl0ZW0pXG5cbiAgICAgIGlmIChpdGVtID09PSBPYmplY3QoaXRlbSkpIHtcbiAgICAgICAgZGlzYWJsZWQgPSBkaXNhYmxlZCAhPT0gbnVsbFxuICAgICAgICAgID8gZGlzYWJsZWRcbiAgICAgICAgICA6IHRoaXMuZ2V0RGlzYWJsZWQoaXRlbSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGlsZSA9IHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGluIGxpc3QgZG9lcyBub3RcbiAgICAgICAgICAvLyBjb250YWluIGFyaWEtc2VsZWN0ZWQgYnkgZGVmYXVsdFxuICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogU3RyaW5nKHZhbHVlKSxcbiAgICAgICAgICBpZDogYGxpc3QtaXRlbS0ke3RoaXMuX3VpZH0tJHtpbmRleH1gLFxuICAgICAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgICB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIG1vdXNlZG93bjogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IG9uQmx1ciBmcm9tIGJlaW5nIGNhbGxlZFxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjbGljazogKCkgPT4gZGlzYWJsZWQgfHwgdGhpcy4kZW1pdCgnc2VsZWN0JywgaXRlbSksXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgYWN0aXZlQ2xhc3M6IHRoaXMudGlsZUFjdGl2ZUNsYXNzLFxuICAgICAgICAgIGRpc2FibGVkLFxuICAgICAgICAgIHJpcHBsZTogdHJ1ZSxcbiAgICAgICAgICBpbnB1dFZhbHVlOiB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLiRzY29wZWRTbG90cy5pdGVtKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0SXRlbSwgdGlsZSwgW1xuICAgICAgICAgIHRoaXMuYWN0aW9uICYmICF0aGlzLmhpZGVTZWxlY3RlZCAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gdGhpcy5nZW5BY3Rpb24oaXRlbSwgdmFsdWUpXG4gICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgdGhpcy5nZW5UaWxlQ29udGVudChpdGVtLCBpbmRleCksXG4gICAgICAgIF0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXNcbiAgICAgIGNvbnN0IHNjb3BlZFNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5pdGVtKHtcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpdGVtLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIC4uLnRpbGUuYXR0cnMsXG4gICAgICAgICAgLi4udGlsZS5wcm9wcyxcbiAgICAgICAgfSxcbiAgICAgICAgb246IHRpbGUub24sXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gdGhpcy5uZWVkc1RpbGUoc2NvcGVkU2xvdClcbiAgICAgICAgPyB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0SXRlbSwgdGlsZSwgc2NvcGVkU2xvdClcbiAgICAgICAgOiBzY29wZWRTbG90XG4gICAgfSxcbiAgICBnZW5UaWxlQ29udGVudCAoaXRlbTogYW55LCBpbmRleCA9IDApOiBWTm9kZSB7XG4gICAgICBjb25zdCBpbm5lckhUTUwgPSB0aGlzLmdlbkZpbHRlcmVkVGV4dCh0aGlzLmdldFRleHQoaXRlbSkpXG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0SXRlbUNvbnRlbnQsXG4gICAgICAgIFt0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0SXRlbVRpdGxlLCB7XG4gICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MIH0sXG4gICAgICAgIH0pXVxuICAgICAgKVxuICAgIH0sXG4gICAgaGFzSXRlbSAoaXRlbTogb2JqZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZWRJdGVtcy5pbmRleE9mKHRoaXMuZ2V0VmFsdWUoaXRlbSkpID4gLTFcbiAgICB9LFxuICAgIG5lZWRzVGlsZSAoc2xvdDogVk5vZGVbXSB8IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHNsb3QhLmxlbmd0aCAhPT0gMSB8fFxuICAgICAgICBzbG90IVswXS5jb21wb25lbnRPcHRpb25zID09IG51bGwgfHxcbiAgICAgICAgc2xvdCFbMF0uY29tcG9uZW50T3B0aW9ucy5DdG9yLm9wdGlvbnMubmFtZSAhPT0gJ3YtbGlzdC1pdGVtJ1xuICAgIH0sXG4gICAgZ2V0RGlzYWJsZWQgKGl0ZW06IG9iamVjdCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCB0aGlzLml0ZW1EaXNhYmxlZCwgZmFsc2UpKVxuICAgIH0sXG4gICAgZ2V0VGV4dCAoaXRlbTogb2JqZWN0KSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgdGhpcy5pdGVtVGV4dCwgaXRlbSkpXG4gICAgfSxcbiAgICBnZXRWYWx1ZSAoaXRlbTogb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCB0aGlzLml0ZW1WYWx1ZSwgdGhpcy5nZXRUZXh0KGl0ZW0pKVxuICAgIH0sXG4gIH0sXG5cbiAgcmVuZGVyICgpOiBWTm9kZSB7XG4gICAgY29uc3QgY2hpbGRyZW46IFZOb2RlQ2hpbGRyZW4gPSBbXVxuICAgIGNvbnN0IGl0ZW1zTGVuZ3RoID0gdGhpcy5pdGVtcy5sZW5ndGhcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaXRlbXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW2luZGV4XVxuXG4gICAgICBpZiAodGhpcy5oaWRlU2VsZWN0ZWQgJiZcbiAgICAgICAgdGhpcy5oYXNJdGVtKGl0ZW0pXG4gICAgICApIGNvbnRpbnVlXG5cbiAgICAgIGlmIChpdGVtID09IG51bGwpIGNoaWxkcmVuLnB1c2godGhpcy5nZW5UaWxlKHsgaXRlbSwgaW5kZXggfSkpXG4gICAgICBlbHNlIGlmIChpdGVtLmhlYWRlcikgY2hpbGRyZW4ucHVzaCh0aGlzLmdlbkhlYWRlcihpdGVtKSlcbiAgICAgIGVsc2UgaWYgKGl0ZW0uZGl2aWRlcikgY2hpbGRyZW4ucHVzaCh0aGlzLmdlbkRpdmlkZXIoaXRlbSkpXG4gICAgICBlbHNlIGNoaWxkcmVuLnB1c2godGhpcy5nZW5UaWxlKHsgaXRlbSwgaW5kZXggfSkpXG4gICAgfVxuXG4gICAgY2hpbGRyZW4ubGVuZ3RoIHx8IGNoaWxkcmVuLnB1c2godGhpcy4kc2xvdHNbJ25vLWRhdGEnXSB8fCB0aGlzLnN0YXRpY05vRGF0YVRpbGUpXG5cbiAgICB0aGlzLiRzbG90c1sncHJlcGVuZC1pdGVtJ10gJiYgY2hpbGRyZW4udW5zaGlmdCh0aGlzLiRzbG90c1sncHJlcGVuZC1pdGVtJ10pXG5cbiAgICB0aGlzLiRzbG90c1snYXBwZW5kLWl0ZW0nXSAmJiBjaGlsZHJlbi5wdXNoKHRoaXMuJHNsb3RzWydhcHBlbmQtaXRlbSddKVxuXG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3QsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiAndi1zZWxlY3QtbGlzdCcsXG4gICAgICBjbGFzczogdGhpcy50aGVtZUNsYXNzZXMsXG4gICAgICBhdHRyczoge1xuICAgICAgICByb2xlOiAnbGlzdGJveCcsXG4gICAgICAgIHRhYmluZGV4OiAtMSxcbiAgICAgIH0sXG4gICAgICBwcm9wczogeyBkZW5zZTogdGhpcy5kZW5zZSB9LFxuICAgIH0sIGNoaWxkcmVuKVxuICB9LFxufSlcbiJdfQ==