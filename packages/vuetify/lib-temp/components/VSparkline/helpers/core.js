export function genPoints(values, boundary) {
    const { minX, maxX, minY, maxY } = boundary;
    const totalValues = values.length;
    const maxValue = Math.max(...values);
    const minValue = Math.min(...values);
    const gridX = (maxX - minX) / (totalValues - 1);
    const gridY = (maxY - minY) / ((maxValue - minValue) || 1);
    return values.map((value, index) => {
        return {
            x: minX + index * gridX,
            y: maxY -
                (value - minValue) * gridY +
                +(index === totalValues - 1) * 0.00001 -
                +(index === 0) * 0.00001,
            value,
        };
    });
}
export function genBars(values, boundary) {
    const { minX, maxX, minY, maxY } = boundary;
    const totalValues = values.length;
    let maxValue = Math.max(...values);
    let minValue = Math.min(...values);
    if (minValue > 0)
        minValue = 0;
    if (maxValue < 0)
        maxValue = 0;
    const gridX = maxX / totalValues;
    const gridY = (maxY - minY) / ((maxValue - minValue) || 1);
    const horizonY = maxY - Math.abs(minValue * gridY);
    return values.map((value, index) => {
        const height = Math.abs(gridY * value);
        return {
            x: minX + index * gridX,
            y: horizonY - height +
                +(value < 0) * height,
            height,
            value,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxTQUFTLENBQ3ZCLE1BQWdCLEVBQ2hCLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRXBDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFFMUQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2pDLE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLO1lBQ3ZCLENBQUMsRUFDQyxJQUFJO2dCQUNKLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEtBQUs7Z0JBQzFCLENBQUMsQ0FBQyxLQUFLLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87Z0JBQ3RDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsT0FBTztZQUMxQixLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQ3JCLE1BQWdCLEVBQ2hCLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDbEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRWxDLElBQUksUUFBUSxHQUFHLENBQUM7UUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBQzlCLElBQUksUUFBUSxHQUFHLENBQUM7UUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBRTlCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxXQUFXLENBQUE7SUFDaEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMxRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUE7SUFFbEQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFBO1FBRXRDLE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLO1lBQ3ZCLENBQUMsRUFBRSxRQUFRLEdBQUcsTUFBTTtnQkFDbEIsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO1lBQ3ZCLE1BQU07WUFDTixLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvaW50LCBCb3VuZGFyeSwgQmFyIH0gZnJvbSAnLi4vVlNwYXJrbGluZSdcblxuZXhwb3J0IGZ1bmN0aW9uIGdlblBvaW50cyAoXG4gIHZhbHVlczogbnVtYmVyW10sXG4gIGJvdW5kYXJ5OiBCb3VuZGFyeVxuKTogUG9pbnRbXSB7XG4gIGNvbnN0IHsgbWluWCwgbWF4WCwgbWluWSwgbWF4WSB9ID0gYm91bmRhcnlcbiAgY29uc3QgdG90YWxWYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoXG4gIGNvbnN0IG1heFZhbHVlID0gTWF0aC5tYXgoLi4udmFsdWVzKVxuICBjb25zdCBtaW5WYWx1ZSA9IE1hdGgubWluKC4uLnZhbHVlcylcblxuICBjb25zdCBncmlkWCA9IChtYXhYIC0gbWluWCkgLyAodG90YWxWYWx1ZXMgLSAxKVxuICBjb25zdCBncmlkWSA9IChtYXhZIC0gbWluWSkgLyAoKG1heFZhbHVlIC0gbWluVmFsdWUpIHx8IDEpXG5cbiAgcmV0dXJuIHZhbHVlcy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBtaW5YICsgaW5kZXggKiBncmlkWCxcbiAgICAgIHk6XG4gICAgICAgIG1heFkgLVxuICAgICAgICAodmFsdWUgLSBtaW5WYWx1ZSkgKiBncmlkWSArXG4gICAgICAgICsoaW5kZXggPT09IHRvdGFsVmFsdWVzIC0gMSkgKiAwLjAwMDAxIC1cbiAgICAgICAgKyhpbmRleCA9PT0gMCkgKiAwLjAwMDAxLFxuICAgICAgdmFsdWUsXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuQmFycyAoXG4gIHZhbHVlczogbnVtYmVyW10sXG4gIGJvdW5kYXJ5OiBCb3VuZGFyeVxuKTogQmFyW10ge1xuICBjb25zdCB7IG1pblgsIG1heFgsIG1pblksIG1heFkgfSA9IGJvdW5kYXJ5XG4gIGNvbnN0IHRvdGFsVmFsdWVzID0gdmFsdWVzLmxlbmd0aFxuICBsZXQgbWF4VmFsdWUgPSBNYXRoLm1heCguLi52YWx1ZXMpXG4gIGxldCBtaW5WYWx1ZSA9IE1hdGgubWluKC4uLnZhbHVlcylcblxuICBpZiAobWluVmFsdWUgPiAwKSBtaW5WYWx1ZSA9IDBcbiAgaWYgKG1heFZhbHVlIDwgMCkgbWF4VmFsdWUgPSAwXG5cbiAgY29uc3QgZ3JpZFggPSBtYXhYIC8gdG90YWxWYWx1ZXNcbiAgY29uc3QgZ3JpZFkgPSAobWF4WSAtIG1pblkpIC8gKChtYXhWYWx1ZSAtIG1pblZhbHVlKSB8fCAxKVxuICBjb25zdCBob3Jpem9uWSA9IG1heFkgLSBNYXRoLmFicyhtaW5WYWx1ZSAqIGdyaWRZKVxuXG4gIHJldHVybiB2YWx1ZXMubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmFicyhncmlkWSAqIHZhbHVlKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IG1pblggKyBpbmRleCAqIGdyaWRYLFxuICAgICAgeTogaG9yaXpvblkgLSBoZWlnaHQgK1xuICAgICAgICArKHZhbHVlIDwgMCkgKiBoZWlnaHQsXG4gICAgICBoZWlnaHQsXG4gICAgICB2YWx1ZSxcbiAgICB9XG4gIH0pXG59XG4iXX0=