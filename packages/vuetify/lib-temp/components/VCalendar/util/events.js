import { parseTimestamp, getDayIdentifier, getTimestampIdentifier, OFFSET_TIME, isTimedless, updateHasTime, } from './timestamp';
export function parseEvent(input, index, startProperty, endProperty, timed = false, category = false) {
    const startInput = input[startProperty];
    const endInput = input[endProperty];
    const startParsed = parseTimestamp(startInput, true);
    const endParsed = (endInput ? parseTimestamp(endInput, true) : startParsed);
    const start = isTimedless(startInput)
        ? updateHasTime(startParsed, timed)
        : startParsed;
    const end = isTimedless(endInput)
        ? updateHasTime(endParsed, timed)
        : endParsed;
    const startIdentifier = getDayIdentifier(start);
    const startTimestampIdentifier = getTimestampIdentifier(start);
    const endIdentifier = getDayIdentifier(end);
    const endOffset = start.hasTime ? 0 : 2359;
    const endTimestampIdentifier = getTimestampIdentifier(end) + endOffset;
    const allDay = !start.hasTime;
    return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index, category };
}
export function isEventOn(event, dayIdentifier) {
    return dayIdentifier >= event.startIdentifier &&
        dayIdentifier <= event.endIdentifier &&
        dayIdentifier * OFFSET_TIME !== event.endTimestampIdentifier;
}
export function isEventStart(event, day, dayIdentifier, firstWeekday) {
    return dayIdentifier === event.startIdentifier || (firstWeekday === day.weekday && isEventOn(event, dayIdentifier));
}
export function isEventOverlapping(event, startIdentifier, endIdentifier) {
    return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL3V0aWwvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN0QixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsR0FDZCxNQUFNLGFBQWEsQ0FBQTtBQUdwQixNQUFNLFVBQVUsVUFBVSxDQUN4QixLQUFvQixFQUNwQixLQUFhLEVBQ2IsYUFBcUIsRUFDckIsV0FBbUIsRUFDbkIsS0FBSyxHQUFHLEtBQUssRUFDYixXQUEyQixLQUFLO0lBRWhDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUN2QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDbkMsTUFBTSxXQUFXLEdBQXNCLGNBQWMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdkUsTUFBTSxTQUFTLEdBQXNCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUM5RixNQUFNLEtBQUssR0FBc0IsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUN0RCxDQUFDLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUM7UUFDbkMsQ0FBQyxDQUFDLFdBQVcsQ0FBQTtJQUNmLE1BQU0sR0FBRyxHQUFzQixXQUFXLENBQUMsUUFBUSxDQUFDO1FBQ2xELENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQztRQUNqQyxDQUFDLENBQUMsU0FBUyxDQUFBO0lBQ2IsTUFBTSxlQUFlLEdBQVcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkQsTUFBTSx3QkFBd0IsR0FBVyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0RSxNQUFNLGFBQWEsR0FBVyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNuRCxNQUFNLFNBQVMsR0FBVyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtJQUNsRCxNQUFNLHNCQUFzQixHQUFXLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQTtJQUM5RSxNQUFNLE1BQU0sR0FBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUE7SUFFdEMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQTtBQUN6SSxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBRSxLQUEwQixFQUFFLGFBQXFCO0lBQzFFLE9BQU8sYUFBYSxJQUFJLEtBQUssQ0FBQyxlQUFlO1FBQzNDLGFBQWEsSUFBSSxLQUFLLENBQUMsYUFBYTtRQUNwQyxhQUFhLEdBQUcsV0FBVyxLQUFLLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQTtBQUNoRSxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBRSxLQUEwQixFQUFFLEdBQXNCLEVBQUUsYUFBcUIsRUFBRSxZQUFvQjtJQUMzSCxPQUFPLGFBQWEsS0FBSyxLQUFLLENBQUMsZUFBZSxJQUFJLENBQUMsWUFBWSxLQUFLLEdBQUcsQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFBO0FBQ3JILENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUUsS0FBMEIsRUFBRSxlQUF1QixFQUFFLGFBQXFCO0lBQzVHLE9BQU8sZUFBZSxJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksYUFBYSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUE7QUFDekYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHBhcnNlVGltZXN0YW1wLFxuICBnZXREYXlJZGVudGlmaWVyLFxuICBnZXRUaW1lc3RhbXBJZGVudGlmaWVyLFxuICBPRkZTRVRfVElNRSxcbiAgaXNUaW1lZGxlc3MsXG4gIHVwZGF0ZUhhc1RpbWUsXG59IGZyb20gJy4vdGltZXN0YW1wJ1xuaW1wb3J0IHsgQ2FsZW5kYXJUaW1lc3RhbXAsIENhbGVuZGFyRXZlbnQsIENhbGVuZGFyRXZlbnRQYXJzZWQgfSBmcm9tICd2dWV0aWZ5L3R5cGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFdmVudCAoXG4gIGlucHV0OiBDYWxlbmRhckV2ZW50LFxuICBpbmRleDogbnVtYmVyLFxuICBzdGFydFByb3BlcnR5OiBzdHJpbmcsXG4gIGVuZFByb3BlcnR5OiBzdHJpbmcsXG4gIHRpbWVkID0gZmFsc2UsXG4gIGNhdGVnb3J5OiBzdHJpbmcgfCBmYWxzZSA9IGZhbHNlLFxuKTogQ2FsZW5kYXJFdmVudFBhcnNlZCB7XG4gIGNvbnN0IHN0YXJ0SW5wdXQgPSBpbnB1dFtzdGFydFByb3BlcnR5XVxuICBjb25zdCBlbmRJbnB1dCA9IGlucHV0W2VuZFByb3BlcnR5XVxuICBjb25zdCBzdGFydFBhcnNlZDogQ2FsZW5kYXJUaW1lc3RhbXAgPSBwYXJzZVRpbWVzdGFtcChzdGFydElucHV0LCB0cnVlKVxuICBjb25zdCBlbmRQYXJzZWQ6IENhbGVuZGFyVGltZXN0YW1wID0gKGVuZElucHV0ID8gcGFyc2VUaW1lc3RhbXAoZW5kSW5wdXQsIHRydWUpIDogc3RhcnRQYXJzZWQpXG4gIGNvbnN0IHN0YXJ0OiBDYWxlbmRhclRpbWVzdGFtcCA9IGlzVGltZWRsZXNzKHN0YXJ0SW5wdXQpXG4gICAgPyB1cGRhdGVIYXNUaW1lKHN0YXJ0UGFyc2VkLCB0aW1lZClcbiAgICA6IHN0YXJ0UGFyc2VkXG4gIGNvbnN0IGVuZDogQ2FsZW5kYXJUaW1lc3RhbXAgPSBpc1RpbWVkbGVzcyhlbmRJbnB1dClcbiAgICA/IHVwZGF0ZUhhc1RpbWUoZW5kUGFyc2VkLCB0aW1lZClcbiAgICA6IGVuZFBhcnNlZFxuICBjb25zdCBzdGFydElkZW50aWZpZXI6IG51bWJlciA9IGdldERheUlkZW50aWZpZXIoc3RhcnQpXG4gIGNvbnN0IHN0YXJ0VGltZXN0YW1wSWRlbnRpZmllcjogbnVtYmVyID0gZ2V0VGltZXN0YW1wSWRlbnRpZmllcihzdGFydClcbiAgY29uc3QgZW5kSWRlbnRpZmllcjogbnVtYmVyID0gZ2V0RGF5SWRlbnRpZmllcihlbmQpXG4gIGNvbnN0IGVuZE9mZnNldDogbnVtYmVyID0gc3RhcnQuaGFzVGltZSA/IDAgOiAyMzU5XG4gIGNvbnN0IGVuZFRpbWVzdGFtcElkZW50aWZpZXI6IG51bWJlciA9IGdldFRpbWVzdGFtcElkZW50aWZpZXIoZW5kKSArIGVuZE9mZnNldFxuICBjb25zdCBhbGxEYXk6IGJvb2xlYW4gPSAhc3RhcnQuaGFzVGltZVxuXG4gIHJldHVybiB7IGlucHV0LCBzdGFydCwgc3RhcnRJZGVudGlmaWVyLCBzdGFydFRpbWVzdGFtcElkZW50aWZpZXIsIGVuZCwgZW5kSWRlbnRpZmllciwgZW5kVGltZXN0YW1wSWRlbnRpZmllciwgYWxsRGF5LCBpbmRleCwgY2F0ZWdvcnkgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudE9uIChldmVudDogQ2FsZW5kYXJFdmVudFBhcnNlZCwgZGF5SWRlbnRpZmllcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBkYXlJZGVudGlmaWVyID49IGV2ZW50LnN0YXJ0SWRlbnRpZmllciAmJlxuICAgIGRheUlkZW50aWZpZXIgPD0gZXZlbnQuZW5kSWRlbnRpZmllciAmJlxuICAgIGRheUlkZW50aWZpZXIgKiBPRkZTRVRfVElNRSAhPT0gZXZlbnQuZW5kVGltZXN0YW1wSWRlbnRpZmllclxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudFN0YXJ0IChldmVudDogQ2FsZW5kYXJFdmVudFBhcnNlZCwgZGF5OiBDYWxlbmRhclRpbWVzdGFtcCwgZGF5SWRlbnRpZmllcjogbnVtYmVyLCBmaXJzdFdlZWtkYXk6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gZGF5SWRlbnRpZmllciA9PT0gZXZlbnQuc3RhcnRJZGVudGlmaWVyIHx8IChmaXJzdFdlZWtkYXkgPT09IGRheS53ZWVrZGF5ICYmIGlzRXZlbnRPbihldmVudCwgZGF5SWRlbnRpZmllcikpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW50T3ZlcmxhcHBpbmcgKGV2ZW50OiBDYWxlbmRhckV2ZW50UGFyc2VkLCBzdGFydElkZW50aWZpZXI6IG51bWJlciwgZW5kSWRlbnRpZmllcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBzdGFydElkZW50aWZpZXIgPD0gZXZlbnQuZW5kSWRlbnRpZmllciAmJiBlbmRJZGVudGlmaWVyID49IGV2ZW50LnN0YXJ0SWRlbnRpZmllclxufVxuIl19