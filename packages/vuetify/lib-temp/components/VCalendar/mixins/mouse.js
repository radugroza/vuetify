import Vue from 'vue';
export default Vue.extend({
    name: 'mouse',
    methods: {
        getDefaultMouseEventHandlers(suffix, getEvent) {
            return this.getMouseEventHandlers({
                ['click' + suffix]: { event: 'click' },
                ['contextmenu' + suffix]: { event: 'contextmenu', prevent: true, result: false },
                ['mousedown' + suffix]: { event: 'mousedown' },
                ['mousemove' + suffix]: { event: 'mousemove' },
                ['mouseup' + suffix]: { event: 'mouseup' },
                ['mouseenter' + suffix]: { event: 'mouseenter' },
                ['mouseleave' + suffix]: { event: 'mouseleave' },
                ['touchstart' + suffix]: { event: 'touchstart' },
                ['touchmove' + suffix]: { event: 'touchmove' },
                ['touchend' + suffix]: { event: 'touchend' },
            }, getEvent);
        },
        getMouseEventHandlers(events, getEvent) {
            const on = {};
            for (const event in events) {
                const eventOptions = events[event];
                if (!this.$listeners[event])
                    continue;
                // TODO somehow pull in modifiers
                const prefix = eventOptions.passive ? '&' : ((eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : ''));
                const key = prefix + eventOptions.event;
                const handler = e => {
                    const mouseEvent = e;
                    if (eventOptions.button === undefined || (mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button)) {
                        if (eventOptions.prevent) {
                            e.preventDefault();
                        }
                        if (eventOptions.stop) {
                            e.stopPropagation();
                        }
                        this.$emit(event, getEvent(e));
                    }
                    return eventOptions.result;
                };
                if (key in on) {
                    /* istanbul ignore next */
                    if (Array.isArray(on[key])) {
                        on[key].push(handler);
                    }
                    else {
                        on[key] = [on[key], handler];
                    }
                }
                else {
                    on[key] = handler;
                }
            }
            return on;
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2FsZW5kYXIvbWl4aW5zL21vdXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQTtBQXFCckIsZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3hCLElBQUksRUFBRSxPQUFPO0lBRWIsT0FBTyxFQUFFO1FBQ1AsNEJBQTRCLENBQUUsTUFBYyxFQUFFLFFBQXNCO1lBQ2xFLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDO2dCQUNoQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7Z0JBQ3RDLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7Z0JBQ2hGLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtnQkFDOUMsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO2dCQUM5QyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzFDLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRTtnQkFDaEQsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFO2dCQUNoRCxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUU7Z0JBQ2hELENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtnQkFDOUMsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO2FBQzdDLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDZCxDQUFDO1FBQ0QscUJBQXFCLENBQUUsTUFBbUIsRUFBRSxRQUFzQjtZQUNoRSxNQUFNLEVBQUUsR0FBbUIsRUFBRSxDQUFBO1lBRTdCLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO2dCQUMxQixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFBRSxTQUFRO2dCQUVyQyxpQ0FBaUM7Z0JBRWpDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7Z0JBQ2hILE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFBO2dCQUV2QyxNQUFNLE9BQU8sR0FBaUIsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hDLE1BQU0sVUFBVSxHQUFlLENBQWUsQ0FBQTtvQkFDOUMsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO3dCQUM5RyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7NEJBQ3hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTt5QkFDbkI7d0JBQ0QsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFOzRCQUNyQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7eUJBQ3BCO3dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMvQjtvQkFFRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUE7Z0JBQzVCLENBQUMsQ0FBQTtnQkFFRCxJQUFJLEdBQUcsSUFBSSxFQUFFLEVBQUU7b0JBQ2IsMEJBQTBCO29CQUMxQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7d0JBQ3pCLEVBQUUsQ0FBQyxHQUFHLENBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO3FCQUMxQzt5QkFBTTt3QkFDTCxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFtQixDQUFBO3FCQUMvQztpQkFDRjtxQkFBTTtvQkFDTCxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFBO2lCQUNsQjthQUNGO1lBRUQsT0FBTyxFQUFFLENBQUE7UUFDWCxDQUFDO0tBQ0Y7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcblxuZXhwb3J0IHR5cGUgTW91c2VIYW5kbGVyID0gKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSA9PiBhbnlcblxuZXhwb3J0IHR5cGUgTW91c2VFdmVudHMgPSB7XG4gIFtldmVudDogc3RyaW5nXToge1xuICAgIGV2ZW50OiBzdHJpbmdcbiAgICBwYXNzaXZlPzogYm9vbGVhblxuICAgIGNhcHR1cmU/OiBib29sZWFuXG4gICAgb25jZT86IGJvb2xlYW5cbiAgICBzdG9wPzogYm9vbGVhblxuICAgIHByZXZlbnQ/OiBib29sZWFuXG4gICAgYnV0dG9uPzogbnVtYmVyXG4gICAgcmVzdWx0PzogYW55XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgTW91c2VFdmVudHNNYXAgPSB7XG4gIFtldmVudDogc3RyaW5nXTogTW91c2VIYW5kbGVyIHwgTW91c2VIYW5kbGVyW11cbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlLmV4dGVuZCh7XG4gIG5hbWU6ICdtb3VzZScsXG5cbiAgbWV0aG9kczoge1xuICAgIGdldERlZmF1bHRNb3VzZUV2ZW50SGFuZGxlcnMgKHN1ZmZpeDogc3RyaW5nLCBnZXRFdmVudDogTW91c2VIYW5kbGVyKTogTW91c2VFdmVudHNNYXAge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0TW91c2VFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgWydjbGljaycgKyBzdWZmaXhdOiB7IGV2ZW50OiAnY2xpY2snIH0sXG4gICAgICAgIFsnY29udGV4dG1lbnUnICsgc3VmZml4XTogeyBldmVudDogJ2NvbnRleHRtZW51JywgcHJldmVudDogdHJ1ZSwgcmVzdWx0OiBmYWxzZSB9LFxuICAgICAgICBbJ21vdXNlZG93bicgKyBzdWZmaXhdOiB7IGV2ZW50OiAnbW91c2Vkb3duJyB9LFxuICAgICAgICBbJ21vdXNlbW92ZScgKyBzdWZmaXhdOiB7IGV2ZW50OiAnbW91c2Vtb3ZlJyB9LFxuICAgICAgICBbJ21vdXNldXAnICsgc3VmZml4XTogeyBldmVudDogJ21vdXNldXAnIH0sXG4gICAgICAgIFsnbW91c2VlbnRlcicgKyBzdWZmaXhdOiB7IGV2ZW50OiAnbW91c2VlbnRlcicgfSxcbiAgICAgICAgWydtb3VzZWxlYXZlJyArIHN1ZmZpeF06IHsgZXZlbnQ6ICdtb3VzZWxlYXZlJyB9LFxuICAgICAgICBbJ3RvdWNoc3RhcnQnICsgc3VmZml4XTogeyBldmVudDogJ3RvdWNoc3RhcnQnIH0sXG4gICAgICAgIFsndG91Y2htb3ZlJyArIHN1ZmZpeF06IHsgZXZlbnQ6ICd0b3VjaG1vdmUnIH0sXG4gICAgICAgIFsndG91Y2hlbmQnICsgc3VmZml4XTogeyBldmVudDogJ3RvdWNoZW5kJyB9LFxuICAgICAgfSwgZ2V0RXZlbnQpXG4gICAgfSxcbiAgICBnZXRNb3VzZUV2ZW50SGFuZGxlcnMgKGV2ZW50czogTW91c2VFdmVudHMsIGdldEV2ZW50OiBNb3VzZUhhbmRsZXIpOiBNb3VzZUV2ZW50c01hcCB7XG4gICAgICBjb25zdCBvbjogTW91c2VFdmVudHNNYXAgPSB7fVxuXG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IGluIGV2ZW50cykge1xuICAgICAgICBjb25zdCBldmVudE9wdGlvbnMgPSBldmVudHNbZXZlbnRdXG5cbiAgICAgICAgaWYgKCF0aGlzLiRsaXN0ZW5lcnNbZXZlbnRdKSBjb250aW51ZVxuXG4gICAgICAgIC8vIFRPRE8gc29tZWhvdyBwdWxsIGluIG1vZGlmaWVyc1xuXG4gICAgICAgIGNvbnN0IHByZWZpeCA9IGV2ZW50T3B0aW9ucy5wYXNzaXZlID8gJyYnIDogKChldmVudE9wdGlvbnMub25jZSA/ICd+JyA6ICcnKSArIChldmVudE9wdGlvbnMuY2FwdHVyZSA/ICchJyA6ICcnKSlcbiAgICAgICAgY29uc3Qga2V5ID0gcHJlZml4ICsgZXZlbnRPcHRpb25zLmV2ZW50XG5cbiAgICAgICAgY29uc3QgaGFuZGxlcjogTW91c2VIYW5kbGVyID0gZSA9PiB7XG4gICAgICAgICAgY29uc3QgbW91c2VFdmVudDogTW91c2VFdmVudCA9IGUgYXMgTW91c2VFdmVudFxuICAgICAgICAgIGlmIChldmVudE9wdGlvbnMuYnV0dG9uID09PSB1bmRlZmluZWQgfHwgKG1vdXNlRXZlbnQuYnV0dG9ucyA+IDAgJiYgbW91c2VFdmVudC5idXR0b24gPT09IGV2ZW50T3B0aW9ucy5idXR0b24pKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRPcHRpb25zLnByZXZlbnQpIHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnRPcHRpb25zLnN0b3ApIHtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4kZW1pdChldmVudCwgZ2V0RXZlbnQoZSkpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGV2ZW50T3B0aW9ucy5yZXN1bHRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgaW4gb24pIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9uW2tleV0pKSB7XG4gICAgICAgICAgICAob25ba2V5XSBhcyBNb3VzZUhhbmRsZXJbXSkucHVzaChoYW5kbGVyKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvbltrZXldID0gW29uW2tleV0sIGhhbmRsZXJdIGFzIE1vdXNlSGFuZGxlcltdXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uW2tleV0gPSBoYW5kbGVyXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uXG4gICAgfSxcbiAgfSxcbn0pXG4iXX0=