// Styles
import './VBreadcrumbs.sass';
// Components
import VBreadcrumbsItem from './VBreadcrumbsItem';
import VBreadcrumbsDivider from './VBreadcrumbsDivider';
// Mixins
import Themeable from '../../mixins/themeable';
// Utils
import mixins from '../../util/mixins';
export default mixins(Themeable
/* @vue/component */
).extend({
    name: 'v-breadcrumbs',
    props: {
        divider: {
            type: String,
            default: '/',
        },
        items: {
            type: Array,
            default: () => ([]),
        },
        large: Boolean,
    },
    computed: {
        classes() {
            return {
                'v-breadcrumbs--large': this.large,
                ...this.themeClasses,
            };
        },
    },
    methods: {
        genDivider() {
            return this.$createElement(VBreadcrumbsDivider, this.$slots.divider ? this.$slots.divider : this.divider);
        },
        genItems() {
            const items = [];
            const hasSlot = !!this.$scopedSlots.item;
            const keys = [];
            for (let i = 0; i < this.items.length; i++) {
                const item = this.items[i];
                keys.push(item.text);
                if (hasSlot)
                    items.push(this.$scopedSlots.item({ item }));
                else
                    items.push(this.$createElement(VBreadcrumbsItem, { key: keys.join('.'), props: item }, [item.text]));
                if (i < this.items.length - 1)
                    items.push(this.genDivider());
            }
            return items;
        },
    },
    render(h) {
        const children = this.$slots.default || this.genItems();
        return h('ul', {
            staticClass: 'v-breadcrumbs',
            class: this.classes,
        }, children);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkJyZWFkY3J1bWJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkJyZWFkY3J1bWJzL1ZCcmVhZGNydW1icy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyxxQkFBcUIsQ0FBQTtBQUs1QixhQUFhO0FBQ2IsT0FBTyxnQkFBZ0IsTUFBTSxvQkFBb0IsQ0FBQTtBQUNqRCxPQUFPLG1CQUFtQixNQUFNLHVCQUF1QixDQUFBO0FBRXZELFNBQVM7QUFDVCxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUU5QyxRQUFRO0FBQ1IsT0FBTyxNQUFNLE1BQU0sbUJBQW1CLENBQUE7QUFFdEMsZUFBZSxNQUFNLENBQ25CLFNBQVM7QUFDVCxvQkFBb0I7Q0FDckIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUsZUFBZTtJQUVyQixLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxHQUFHO1NBQ2I7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsS0FBd0I7WUFDOUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3BCO1FBQ0QsS0FBSyxFQUFFLE9BQU87S0FDZjtJQUVELFFBQVEsRUFBRTtRQUNSLE9BQU87WUFDTCxPQUFPO2dCQUNMLHNCQUFzQixFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNsQyxHQUFHLElBQUksQ0FBQyxZQUFZO2FBQ3JCLENBQUE7UUFDSCxDQUFDO0tBQ0Y7SUFFRCxPQUFPLEVBQUU7UUFDUCxVQUFVO1lBQ1IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzNHLENBQUM7UUFDRCxRQUFRO1lBQ04sTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFBO1lBQ2hCLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQTtZQUN4QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUE7WUFFZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBRTFCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUVwQixJQUFJLE9BQU87b0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTs7b0JBQ3JELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7Z0JBRXpHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUM7b0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTthQUM3RDtZQUVELE9BQU8sS0FBSyxDQUFBO1FBQ2QsQ0FBQztLQUNGO0lBRUQsTUFBTSxDQUFFLENBQUM7UUFDUCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFFdkQsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ2IsV0FBVyxFQUFFLGVBQWU7WUFDNUIsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPO1NBQ3BCLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDZCxDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU3R5bGVzXG5pbXBvcnQgJy4vVkJyZWFkY3J1bWJzLnNhc3MnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCBWQnJlYWRjcnVtYnNJdGVtIGZyb20gJy4vVkJyZWFkY3J1bWJzSXRlbSdcbmltcG9ydCBWQnJlYWRjcnVtYnNEaXZpZGVyIGZyb20gJy4vVkJyZWFkY3J1bWJzRGl2aWRlcidcblxuLy8gTWl4aW5zXG5pbXBvcnQgVGhlbWVhYmxlIGZyb20gJy4uLy4uL21peGlucy90aGVtZWFibGUnXG5cbi8vIFV0aWxzXG5pbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uL3V0aWwvbWl4aW5zJ1xuXG5leHBvcnQgZGVmYXVsdCBtaXhpbnMoXG4gIFRoZW1lYWJsZVxuICAvKiBAdnVlL2NvbXBvbmVudCAqL1xuKS5leHRlbmQoe1xuICBuYW1lOiAndi1icmVhZGNydW1icycsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXZpZGVyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnLycsXG4gICAgfSxcbiAgICBpdGVtczoge1xuICAgICAgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8YW55W10+LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKFtdKSxcbiAgICB9LFxuICAgIGxhcmdlOiBCb29sZWFuLFxuICB9LFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgY2xhc3NlcyAoKTogb2JqZWN0IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd2LWJyZWFkY3J1bWJzLS1sYXJnZSc6IHRoaXMubGFyZ2UsXG4gICAgICAgIC4uLnRoaXMudGhlbWVDbGFzc2VzLFxuICAgICAgfVxuICAgIH0sXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGdlbkRpdmlkZXIgKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkJyZWFkY3J1bWJzRGl2aWRlciwgdGhpcy4kc2xvdHMuZGl2aWRlciA/IHRoaXMuJHNsb3RzLmRpdmlkZXIgOiB0aGlzLmRpdmlkZXIpXG4gICAgfSxcbiAgICBnZW5JdGVtcyAoKSB7XG4gICAgICBjb25zdCBpdGVtcyA9IFtdXG4gICAgICBjb25zdCBoYXNTbG90ID0gISF0aGlzLiRzY29wZWRTbG90cy5pdGVtXG4gICAgICBjb25zdCBrZXlzID0gW11cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW2ldXG5cbiAgICAgICAga2V5cy5wdXNoKGl0ZW0udGV4dClcblxuICAgICAgICBpZiAoaGFzU2xvdCkgaXRlbXMucHVzaCh0aGlzLiRzY29wZWRTbG90cy5pdGVtISh7IGl0ZW0gfSkpXG4gICAgICAgIGVsc2UgaXRlbXMucHVzaCh0aGlzLiRjcmVhdGVFbGVtZW50KFZCcmVhZGNydW1ic0l0ZW0sIHsga2V5OiBrZXlzLmpvaW4oJy4nKSwgcHJvcHM6IGl0ZW0gfSwgW2l0ZW0udGV4dF0pKVxuXG4gICAgICAgIGlmIChpIDwgdGhpcy5pdGVtcy5sZW5ndGggLSAxKSBpdGVtcy5wdXNoKHRoaXMuZ2VuRGl2aWRlcigpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXRlbXNcbiAgICB9LFxuICB9LFxuXG4gIHJlbmRlciAoaCk6IFZOb2RlIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgdGhpcy5nZW5JdGVtcygpXG5cbiAgICByZXR1cm4gaCgndWwnLCB7XG4gICAgICBzdGF0aWNDbGFzczogJ3YtYnJlYWRjcnVtYnMnLFxuICAgICAgY2xhc3M6IHRoaXMuY2xhc3NlcyxcbiAgICB9LCBjaGlsZHJlbilcbiAgfSxcbn0pXG4iXX0=